// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. 
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// VerifySoftwareDao is the data access object for table verify_software.
type VerifySoftwareDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns VerifySoftwareColumns // columns contains all the column names of Table for convenient usage.
}

// VerifySoftwareColumns defines and stores column names for table verify_software.
type VerifySoftwareColumns struct {
	Id              string // 软件id                  
    SoftwareName    string // 软件名称                
    SecretId        string // 软件唯一标识            
    SecretKey       string // 软件密钥                
    SoftwareStatus  string // 软件状态                
    CardLength      string // 密钥长度                
    EncryptType     string // 加密方式 AES RSA MD5    
    KeyPrefix       string // 密钥前缀                
    MultiOnline     string // 设备上限                
    IsReplace       string // 是否顶号登录 1 是 0 否  
    Heartbeat       string // 心跳间隔                
    OpenTrial       string // 开启试用 1 是 0 否      
    TrialCount      string // 试用次数                
    TrialTime       string // 试用时间(分钟)          
    TrialDuration   string // 每次试用间隔            
    Comment         string // 软件备注                
    CreatedAt       string // 创建时间                
    UpdatedAt       string // 修改时间                
    DeletedAt       string // 删除时间
}

//  verifySoftwareColumns holds the columns for table verify_software.
var verifySoftwareColumns = VerifySoftwareColumns{
	Id:             "id",               
            SoftwareName:   "software_name",    
            SecretId:       "secret_id",        
            SecretKey:      "secret_key",       
            SoftwareStatus: "software_status",  
            CardLength:     "card_length",      
            EncryptType:    "encrypt_type",     
            KeyPrefix:      "key_prefix",       
            MultiOnline:    "multi_online",     
            IsReplace:      "is_replace",       
            Heartbeat:      "heartbeat",        
            OpenTrial:      "open_trial",       
            TrialCount:     "trial_count",      
            TrialTime:      "trial_time",       
            TrialDuration:  "trial_duration",   
            Comment:        "comment",          
            CreatedAt:      "created_at",       
            UpdatedAt:      "updated_at",       
            DeletedAt:      "deleted_at",
}

// NewVerifySoftwareDao creates and returns a new DAO object for table data access.
func NewVerifySoftwareDao() *VerifySoftwareDao {
	return &VerifySoftwareDao{
		group:   "default",
		table:   "verify_software",
		columns: verifySoftwareColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *VerifySoftwareDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *VerifySoftwareDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *VerifySoftwareDao) Columns() VerifySoftwareColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *VerifySoftwareDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *VerifySoftwareDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *VerifySoftwareDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}