// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. 
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AttachmentDao is the data access object for table verify_attachment.
type AttachmentDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns AttachmentColumns // columns contains all the column names of Table for convenient usage.
}

// AttachmentColumns defines and stores column names for table verify_attachment.
type AttachmentColumns struct {
	Id          string //                                      
    FileName    string // 附件名                               
    Md5         string // MD5                                  
    StoreType   string // 1 二进制 2 直接 3 蓝奏云 4 百度网盘  
    OtherParam  string // 其他参数，用于保存网盘密码等         
    FilePath    string // 附件存储路径                         
    FileSize    string // 附件大小 byte                        
    FileType    string //                                      
    Remark      string // 备注                                 
    CreateBy    string // 创建者                               
    UpdateBy    string // 更新者                               
    CreatedAt   string // 创建时间                             
    UpdatedAt   string // 修改时间
}

//  attachmentColumns holds the columns for table verify_attachment.
var attachmentColumns = AttachmentColumns{
	Id:         "id",           
            FileName:   "file_name",    
            Md5:        "md5",          
            StoreType:  "store_type",   
            OtherParam: "other_param",  
            FilePath:   "file_path",    
            FileSize:   "file_size",    
            FileType:   "file_type",    
            Remark:     "remark",       
            CreateBy:   "create_by",    
            UpdateBy:   "update_by",    
            CreatedAt:  "created_at",   
            UpdatedAt:  "updated_at",
}

// NewAttachmentDao creates and returns a new DAO object for table data access.
func NewAttachmentDao() *AttachmentDao {
	return &AttachmentDao{
		group:   "default",
		table:   "verify_attachment",
		columns: attachmentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AttachmentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AttachmentDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AttachmentDao) Columns() AttachmentColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AttachmentDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AttachmentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AttachmentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}