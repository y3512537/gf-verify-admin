// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. 
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// VerifyCardDao is the data access object for table verify_card.
type VerifyCardDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns VerifyCardColumns // columns contains all the column names of Table for convenient usage.
}

// VerifyCardColumns defines and stores column names for table verify_card.
type VerifyCardColumns struct {
	Id            string // 卡密ID                        
    SoftwareId    string // 软件ID                        
    CardCode      string // 密钥                          
    CardValue     string // 面值                          
    CardType      string // 1 分钟 2 小时 3 天 4 月 5 年  
    CardStatus    string // 状态 1 正常 0 冻结            
    UnbindCount   string // 允许解绑次数                  
    GenTime       string // 生成时间                      
    ActivateTime  string // 激活时间                      
    ExpireTime    string // 到期时间                      
    Customize     string // 自定义属性                    
    KeyPrefix     string // 卡密前缀                      
    MultiOnline   string // 多开上限                      
    IsReplace     string // 顶号登录 1 是 0 否            
    Comment       string // 备注                          
    CreatedAt     string // 创建时间                      
    UpdatedAt     string // 修改时间                      
    DeletedAt     string // 删除时间
}

//  verifyCardColumns holds the columns for table verify_card.
var verifyCardColumns = VerifyCardColumns{
	Id:           "id",             
            SoftwareId:   "software_id",    
            CardCode:     "card_code",      
            CardValue:    "card_value",     
            CardType:     "card_type",      
            CardStatus:   "card_status",    
            UnbindCount:  "unbind_count",   
            GenTime:      "gen_time",       
            ActivateTime: "activate_time",  
            ExpireTime:   "expire_time",    
            Customize:    "customize",      
            KeyPrefix:    "key_prefix",     
            MultiOnline:  "multi_online",   
            IsReplace:    "is_replace",     
            Comment:      "comment",        
            CreatedAt:    "created_at",     
            UpdatedAt:    "updated_at",     
            DeletedAt:    "deleted_at",
}

// NewVerifyCardDao creates and returns a new DAO object for table data access.
func NewVerifyCardDao() *VerifyCardDao {
	return &VerifyCardDao{
		group:   "default",
		table:   "verify_card",
		columns: verifyCardColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *VerifyCardDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *VerifyCardDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *VerifyCardDao) Columns() VerifyCardColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *VerifyCardDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *VerifyCardDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *VerifyCardDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}